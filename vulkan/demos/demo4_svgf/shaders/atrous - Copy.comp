#version 450
#extension GL_NV_compute_shader_derivatives : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

/** src */
layout(binding = 0, rgba32f) uniform readonly image2D srcDirectColor;
layout(binding = 1, rgba32f) uniform readonly image2D srcIndirectColor;
layout(binding = 2, rg32f) uniform readonly image2D srcVariance;
layout(binding = 3, rgba32f) uniform readonly image2D currGBufferPosition;
layout(binding = 4, rgba32f) uniform readonly image2D currGBufferNormal;
layout(binding = 5, rgba32f) uniform readonly image2D currGBufferAlbedo;

/** dst */
layout(binding = 6, rgba32f) uniform writeonly image2D dstDirectColor;
layout(binding = 7, rgba32f) uniform writeonly image2D dstIndirectColor;
layout(binding = 8, rg32f) uniform writeonly image2D dstVariance;
layout(binding = 9, rgba32f) uniform writeonly image2D directColorHistory;
layout(binding = 10, rgba32f) uniform writeonly image2D indirectColorHistory;

layout(push_constant) uniform PushConstant{
	mat4 currViewMat;
	mat4 oldViewMat;
	mat4 proj;
	float iteration;
	float sigmal;
	float sigman;
	float sigmap;
};

void main(){
	ivec2 sampleLoc = ivec2(gl_GlobalInvocationID.xy);

	//5x5 a-trous kernel
	float a[25] = {
		1.0/256.0, 1.0/64.0, 3.0/128.0, 1.0/64.0, 1.0/256.0,
		1.0/64.0, 1.0/16.0, 3.0/32.0, 1.0/16.0, 1.0/64.0,
		3.0/128.0, 3.0/32.0, 9.0/64.0, 3.0/32.0, 3.0/128.0,
		1.0/64.0, 1.0/16.0, 3.0/32.0, 1.0/16.0, 1.0/64.0,
		1.0/256.0, 1.0/64.0, 3.0/128.0, 1.0/64.0, 1.0/256.0
	};

	//3x3 gaussian kernel
	float g[9] = {
		1.0/16.0, 1.0/8.0, 1.0/16.0,
		1.0/8.0, 1.0/4.0, 1.0/8.0,
		1.0/16.0, 1.0/8.0, 1.0/16.0
	};

	int step = 1 << int(iteration);
	ivec2 res = imageSize(srcDirectColor);

	/*
	* blur variance 
	*/
	vec2 sum = vec2(0.f);
	vec2 sumw = vec2(0.f);
	ivec2 offset[9] = {
		ivec2(-1, -1), ivec2(0, -1), ivec2(1, -1),
		ivec2(-1, 0), ivec2(0, 0), ivec2(1, 0),
		ivec2(-1, 1), ivec2(0, 1), ivec2(1, 1)
	};
	for(int i = 0; i < 9; ++i){
		ivec2 loc = sampleLoc + offset[i];
		if(loc.x >= 0 && loc.x < res.x && loc.y >= 0 && loc.y < res.y){
			sum += g[i] * imageLoad(srcVariance, sampleLoc).xy;
			sumw += g[i];
		}
	}
	vec2 variance = max(sum / sumw, 0.0);
	float varDirect = variance.x;
	float varIndirect = variance.y;

	/*
	* a-trous filter
	*/
	vec4 srcDirectCol = imageLoad(srcDirectColor, sampleLoc);
	vec4 srcIndirectCol = imageLoad(srcIndirectColor, sampleLoc);
	float srcDirectLuminance = 0.2126 * srcDirectCol.x + 0.7152 * srcDirectCol.y + 0.0722 * srcDirectCol.z;
	float srcIndirectLuminance = 0.2126 * srcIndirectCol.x + 0.7152 * srcIndirectCol.y + 0.0722 * srcIndirectCol.z;
	vec3 srcPos = imageLoad(currGBufferPosition, sampleLoc).xyz;
	vec4 clipPos = proj * currViewMat * vec4(srcPos, 1.f);
	//float linearZ = clipPos.z * clipPos.w;
	clipPos /= clipPos.w;
	//linearZ = max(abs(dFdx(linearZ )), abs(dFdy(linearZ)));

	vec3 srcNormal = imageLoad(currGBufferNormal, sampleLoc).xyz;

	vec3 directColSum = vec3(0.f);
	float directVarianceSum = 0;
	float directWeightSum = 0;
	float directWeightSquaredSum = 0;
	vec3 indirectColSum = vec3(0.f);
	float indirectVarianceSum = 0;
	float indirectWeightSum = 0;
	float indirectWeightSquaredSum = 0;

	for(int j = -2; j <= 2; ++j){
		for(int i = -2; i <= 2; ++i){
			ivec2 neighborLoc = sampleLoc + step * ivec2(i, j);
			if(neighborLoc.x >= 0 && neighborLoc.x < res.x && neighborLoc.y >= 0 && neighborLoc.y < res.y){
				//get neighbot info
				vec3 neighborDirectCol = imageLoad(srcDirectColor, neighborLoc).xyz;
				vec3 neighborIndirectCol = imageLoad(srcIndirectColor, neighborLoc).xyz;
				float neighborDirectLuminance = 0.2126 * neighborDirectCol.x + 0.7152 * neighborDirectCol.y + 0.0722 * neighborDirectCol.z;
				float neighborIndirectLuminance = 0.2126 * neighborIndirectCol.x + 0.7152 * neighborIndirectCol.y + 0.0722 * neighborIndirectCol.z;

				vec3 neighborPos = imageLoad(currGBufferPosition, neighborLoc).xyz;
				vec4 clipNeighborPos = proj * currViewMat * vec4(neighborPos, 1.f);
				clipNeighborPos /= clipNeighborPos.w;

				//float neighborLinearZ = clipNeighborPos.z * clipNeighborPos.w;
				//neighborLinearZ = max(abs(dFdx(neighborLinearZ )), abs(dFdy(neighborLinearZ)));

				vec3 neighborNormal = imageLoad(currGBufferNormal, neighborLoc).xyz;

				//edge stopping functions
				float wdl = exp(-abs(srcDirectLuminance - neighborDirectLuminance) / (sqrt(varDirect) * sigmal + 0.00001f));
				float widl = exp(-abs(srcIndirectLuminance - neighborIndirectLuminance) / (sqrt(varIndirect) * sigmal + 0.00001f));
				//float wn = min(1.f, exp(-distance(srcNormal, neighborNormal) / (sigman + 0.00001f)));
				float wn = pow(max(0.f, dot(neighborNormal, srcNormal)), sigman);

				//vec3 dist = neighborPos - srcPos;
				//float wp = min(1.f, exp(-distance(neighborPos, srcPos) / (sigmap)));
				//float wp = max(exp(-abs(neighborLinearZ - linearZ) / (sigmap  + 0.000001f)), 0);

				float sspd = max(abs(dFdx(clipPos.z)), abs(dFdy(clipPos.z))); //fwidth(clipPos.z);
				float wz = exp(
					-abs(clipPos.z - clipNeighborPos.z) / (abs(sspd * length(vec2(i, j)) ) * sigmap + 0.00001f)
				);

				int k = (2 + i) + (2 + j) * 5;

				//direct
				float directWeight = a[k] * wdl * wn * wz;
				directWeightSum += directWeight;
				directWeightSquaredSum += directWeight * directWeight ;
				directColSum += directWeight * neighborDirectCol;
				directVarianceSum += directWeight * directWeight * imageLoad(srcVariance, neighborLoc).x;

				//indirect
				float indirectWeight = a[k] * widl * wn * wz;
				indirectWeightSum += indirectWeight;
				indirectWeightSquaredSum += indirectWeight * indirectWeight ;
				indirectColSum += indirectWeight * neighborIndirectCol;
				indirectVarianceSum += indirectWeight * indirectWeight * imageLoad(srcVariance, neighborLoc).y;
			}
		}
	}

	if(directWeightSum > 0.001f && indirectWeightSum > 0.001f){
		vec4 directCol = vec4(directColSum / directWeightSum, 1.f);
		vec4 indirectCol = vec4(indirectColSum / indirectWeightSum, 1.f);

		if(iteration == 4){
			vec3 albedo = imageLoad(currGBufferAlbedo, sampleLoc).xyz;
			directCol.xyz *= albedo;
			indirectCol.xyz *= albedo;
			imageStore(dstDirectColor, sampleLoc, (directCol + indirectCol) / 2.f);
			return;
		}

		imageStore(dstDirectColor, sampleLoc, directCol);
		imageStore(dstIndirectColor, sampleLoc, indirectCol);
		imageStore(dstVariance, sampleLoc, vec4(
			directVarianceSum / (directWeightSquaredSum * directWeightSquaredSum),
			indirectVarianceSum / (indirectWeightSquaredSum * indirectWeightSquaredSum), 0, 0));

		if(iteration == 0){
			imageStore(directColorHistory, sampleLoc, directCol);
			imageStore(indirectColorHistory, sampleLoc, indirectCol);
		}
	}
	else{
		if(iteration == 4){
			vec3 albedo = imageLoad(currGBufferAlbedo, sampleLoc).xyz;
			srcDirectCol.xyz *= albedo;
			srcIndirectCol.xyz *= albedo;
			imageStore(dstDirectColor, sampleLoc, (srcDirectCol + srcIndirectCol) / 2.f);
			return;
		}
		imageStore(dstDirectColor, sampleLoc, srcDirectCol);
		imageStore(dstIndirectColor, sampleLoc, srcIndirectCol);
		if(iteration == 0){
			imageStore(directColorHistory, sampleLoc, srcDirectCol);
			imageStore(indirectColorHistory, sampleLoc, srcIndirectCol);
		}
	}
}
