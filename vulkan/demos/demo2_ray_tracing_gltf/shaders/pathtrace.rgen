#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_clock : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#include "ray_common.glsl"
#include "random.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;
layout(binding = 0, set = 1) uniform CameraMatrices{
    mat4 view;
    mat4 proj;
    mat4 viewInverse;
    mat4 projInverse;
} cam;

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(push_constant) uniform Constants{
	vec4 clearColor;
	vec3 lightPosition;
	float lightIntensity;
	int lightType;
	int64_t frame;
} constants;

void main() {
    //anti-aliasing
    uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(constants.frame));

    vec3 hitValue = vec3(0.f);
    for(int sampleNum = 0; sampleNum < 10; sampleNum++){
        float r1 = rnd(seed);
        float r2 = rnd(seed);
        vec2 jitter = constants.frame == 0 ? vec2(0.5f, 0.5f) : vec2(r1, r2);

        const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + jitter; //gl_LaunchIDEXT - integer coordinate of current pixel
        const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy); //gl_LaunchSizeEXT - image size
        vec2 d = inUV * 2.0 - 1.0;

        vec4 origin = cam.viewInverse * vec4(0, 0, 0, 1);
        vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1);
        vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

        uint rayFlags = gl_RayFlagsOpaqueEXT;
        float tMin = 0.001;
        float tMax = 10000.0;

        traceRayEXT(topLevelAS, //acceleration structure
            rayFlags,           //rayFlags
            0xFF,               //cullMask
            0,                  //sbtRecordOffset
            0,                  //sbtRecordStride
            0,                  //missIndex
            origin.xyz,         //ray origin
            tMin,               //ray minRange
            direction.xyz,      //ray direction
            tMax,               //ray maxRange
            0                   //payload (location = 0)
        );
        hitValue += prd.hitValue;
    }
    prd.hitValue = hitValue / 10.f;

    if(constants.frame > 0) {
        float a = 1.f / float(constants.frame + 1);
        vec3 oldColor = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(oldColor, prd.hitValue, a), 1.0));
    }else{
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hitValue, 1.0));
    }
}
