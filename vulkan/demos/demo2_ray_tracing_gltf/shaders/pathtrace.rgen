#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_clock : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#include "ray_common.glsl"
#include "random.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;
layout(binding = 0, set = 1) uniform CameraMatrices{
    mat4 view;
    mat4 proj;
    mat4 viewInverse;
    mat4 projInverse;
} cam;

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(push_constant) uniform PushConstant {
	RtPushConstant pc;
};

void main() {
    //anti-aliasing
    uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));

    float r1 = rnd(seed);
    float r2 = rnd(seed);
    vec2 jitter = pc.frame == 0 ? vec2(0.5f, 0.5f) : vec2(r1, r2);

    vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + jitter; //gl_LaunchIDEXT - integer coordinate of current pixel
    vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy); //gl_LaunchSizeEXT - image size
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = cam.viewInverse * vec4(0, 0, 0, 1);
    vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

    uint rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin = 0.001;
    float tMax = 10000.0;

    prd.hitValue = vec3(0.f);
    prd.seed = seed;
    prd.depth = 0;
    prd.weight = vec3(1.f);
    prd.rayOrigin = origin.xyz;
    prd.rayDirection = direction.xyz;

    vec3 hitValue = vec3(0.f);
    for(int i = 0; i < pc.rayPerPixel; ++i) {
        for(; prd.depth < pc.maxDepht; prd.depth++){
            traceRayEXT(topLevelAS, //acceleration structure
                rayFlags,           //rayFlags
                0xFF,               //cullMask
                0,                  //sbtRecordOffset
                0,                  //sbtRecordStride
                0,                  //missIndex
                prd.rayOrigin,         //ray origin
                tMin,               //ray minRange
                prd.rayDirection,      //ray direction
                tMax,               //ray maxRange
                0                   //payload (location = 0)
            );
        }
        //acummulate color
        hitValue += prd.hitValue;

        //anti-aliasing
        seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));

        r1 = rnd(seed);
        r2 = rnd(seed);
        jitter = pc.frame == 0 ? vec2(0.5f, 0.5f) : vec2(r1, r2);

        pixelCenter = vec2(gl_LaunchIDEXT.xy) + jitter; //gl_LaunchIDEXT - integer coordinate of current pixel
        inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy); //gl_LaunchSizeEXT - image size
        d = inUV * 2.0 - 1.0;

        target = cam.projInverse * vec4(d.x, d.y, 1, 1);
        direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

        //reset payload
        prd.hitValue = vec3(0.f);
        prd.depth = 0;
        prd.weight = vec3(1.f);
        prd.rayOrigin = origin.xyz;
        prd.rayDirection = direction.xyz;
    }
    hitValue /= float(pc.rayPerPixel);

    if(pc.frame > 0) {
        float a = 1.f / float(pc.frame + 1);
        vec3 oldColor = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(oldColor, hitValue, a), 1.0));
    }else{
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 1.0));
    }
}
